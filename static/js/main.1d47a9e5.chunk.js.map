{"version":3,"sources":["serviceWorker.ts","components/GalleryGrid.tsx","components/OptionsMenu.tsx","api/ArtStationAPI.ts","components/errorhandler/ErrorHandler.tsx","GalleryApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","GalleryGrid","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isDownloading","IMAGE_WIDTH","IMAGE_HEIGHT","COLUMN_WIDTH","GUTTER","resetChildState","setState","items","Map","lastId","pageNumber","columnCount","getNewPage","calculateRowCount","rowCount","Math","floor","state","size","console","log","stateAddPageItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","previousState","wrap","_context","prev","next","assign","forEach","item","set","stop","_x","apply","arguments","_callee2","_context2","galleryAPI","getGalleryItems","sortOrder","sent","onResize","_ref3","width","setColumnCount","calculateColumnCount","cellRenderer","cellProps","correctIndex","rowIndex","columnIndex","key","get","Error","react_default","createElement","style","href","itemURL","height","src","thumbnailImageURL","calculatedColumnCount","generateItem","_callee3","prevState","_context3","abrupt","id","stateAddItem","_ref5","_callee4","_context4","_x2","onScroll","_ref6","_callee5","params","loadAheadOffset","_context5","clientHeight","scrollTop","scrollHeight","_x3","render","es","scrollElement","_ref7","isScrolling","onChildScroll","disableHeight","_ref8","rowHeight","columnWidth","autoHeight","calculatePixelValue","inherits","createClass","value","prevProps","React","Component","realPixels","pixelRatio","devicePixelRatio","SORT","OptionsMenu","_React$PureComponent","handleChange","event","target","changeSortOrder","htmlFor","onChange","sortingOptions","map","name","index","defaultSortOrder","selectedSorting","PureComponent","ErrorHandler","hide","oldstate","visible","hasError","lastError","_this2","addEventListener","e","logError","error","message","reason","onClick","ArtStationAPI","baseURL","length","undefined","AVAILABLE_SORT_ORDERS","TRENDING","LATEST","PICKS","POPULARITY","find","page","sorting","isValidSortOrder","options","mode","url","fetch","response","json","artstationItems","data","convertedItems","flatMap","artstationItem","cover","micro_square_image_url","permalink","GalleryApp","newSortOrder","className","OptionsMenu_OptionsMenu","ErrorHandler_ErrorHandler","GalleryGrid_GalleryGrid","ReactDOM","src_GalleryApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gJCMOC,EAAb,SAAAC,GASI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KARFQ,mBAOW,EAAAP,EALXQ,iBAKW,EAAAR,EAJXS,kBAIW,EAAAT,EAHXU,kBAGW,EAAAV,EAFXW,OAAS,EAEEX,EAgBXY,gBAAkB,WACtBZ,EAAKa,SAAS,CACVC,MAAO,IAAIC,IACXC,OAAO,EACPC,WAAY,EACZC,YAAa,IAGjBlB,EAAKO,eAAgB,EAErBP,EAAKmB,cA1BUnB,EA6CnBoB,kBAAoB,WAChB,IAAMC,EAAWC,KAAKC,MAAMvB,EAAKwB,MAAMV,MAAMW,KAAOzB,EAAKwB,MAAMN,aAG/D,OAFAQ,QAAQC,IAAI,2BAA2BN,GACvCK,QAAQC,IAAI,oBAAoB3B,EAAKwB,MAAMV,MAAMW,KAAK,gBAAgBzB,EAAKwB,MAAMN,aAC1EG,GAjDQrB,EAoDnB4B,kBApDmB,eAAAC,EAAA5B,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAoDC,SAAAC,EAAOpB,GAAP,IAAAqB,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZJ,EAAgBlC,OAAOuC,OAAO,GAAIxC,EAAKwB,OAC3CV,EAAM2B,QAAQ,SAACC,GACXP,EAAcrB,MAAM6B,IAAIR,EAAcnB,OAAO0B,GAE7CP,EAAcnB,WAGlBmB,EAAclB,aAREoB,EAAAE,KAAA,EASVvC,EAAKa,SAASsB,GATJ,wBAAAE,EAAAO,SAAAV,MApDD,gBAAAW,GAAA,OAAAhB,EAAAiB,MAAA3C,KAAA4C,YAAA,GAAA/C,EAgEnBmB,WAhEmBlB,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAgEN,SAAAe,IAAA,IAAAlC,EAAA,OAAAiB,EAAAC,EAAAI,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cACTvC,EAAKO,eAAgB,EADZ0C,EAAAV,KAAA,EAGWvC,EAAKD,MAAMmD,WAAWC,gBAAgBnD,EAAKwB,MAAMP,WAAWjB,EAAKD,MAAMqD,WAHlF,cAGHtC,EAHGmC,EAAAI,KAAAJ,EAAAV,KAAA,EAIHvC,EAAK4B,kBAAkBd,GAJpB,OAKTd,EAAKO,eAAgB,EALZ,wBAAA0C,EAAAL,SAAAI,MAhEMhD,EA+EnBsD,SAAW,SAAAC,GAAkB,IAAhBC,EAAgBD,EAAhBC,MACTxD,EAAKyD,eAAezD,EAAK0D,qBAAqBF,KAhF/BxD,EAoFnB2D,aAAe,SAACC,GACZ,IAAMC,EAAgBD,EAAUE,SAAW9D,EAAKwB,MAAMN,YAAc0C,EAAUG,YAC9ErC,QAAQC,IAAI,QAAQiC,EAAUI,IAAI,WAAWH,GAC7C,IAAM/C,EAAQd,EAAKwB,MAAMV,MAEnB4B,EAAO5B,EAAMmD,IAAIJ,GACvB,GAAoB,kBAATnB,EAGP,MAFAhB,QAAQC,IAAI,WACZD,QAAQC,IAAIb,GACN,IAAIoD,MAAM,gBAEpB,OACIC,EAAAnC,EAAAoC,cAAA,KAAGJ,IAAKJ,EAAUI,IAAKK,MAAOT,EAAUS,MAAOC,KAAM5B,EAAK6B,SACtDJ,EAAAnC,EAAAoC,cAAA,OAAKZ,MAAOxD,EAAKQ,YAAagE,OAAQxE,EAAKS,aAAcgE,IAAK/B,EAAKgC,sBAjG5D1E,EA0GnB0D,qBAAuB,SAACF,GACpB,IAAMmB,EAAyBrD,KAAKC,OAAOiC,EAAQxD,EAAKW,SAAWX,EAAKU,aAAeV,EAAKW,SAC5F,OAAIgE,EAAwB,EACjBA,EAEA,GA/GI3E,EAmHnB4E,aAnHmB3E,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAmHJ,SAAA4C,IAAA,IAAAC,EAAA,OAAA/C,EAAAC,EAAAI,KAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,cACPuC,EAAY7E,OAAOuC,OAAO,GAAIxC,EAAKwB,OACvCE,QAAQC,IAAI,sBACZD,QAAQC,IAAImD,EAAU9D,QAEtB8D,EAAU9D,OAAS8D,EAAU9D,OAAS,EAL3B+D,EAAAxC,KAAA,EAMLvC,EAAKa,SAASiE,GANT,cAQXpD,QAAQC,IAAI,gBACZD,QAAQC,IAAImD,EAAU9D,QATX+D,EAAAC,OAAA,SAUJ,CAACC,GAAIH,EAAU9D,OAAQ0D,kBAAmB,+HAAgIH,QAAQ,+BAV9K,wBAAAQ,EAAAnC,SAAAiC,MAnHI7E,EAgInBkF,aAhImB,eAAAC,EAAAlF,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAgIJ,SAAAmD,EAAO1C,GAAP,IAAAP,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cACPJ,EAAgBlC,OAAOuC,OAAO,GAAIxC,EAAKwB,QAC7BV,MAAM6B,IAAID,EAAKuC,GAAGvC,GAFrB2C,EAAA9C,KAAA,EAGLvC,EAAKa,SAASsB,GAHT,wBAAAkD,EAAAzC,SAAAwC,MAhII,gBAAAE,GAAA,OAAAH,EAAArC,MAAA3C,KAAA4C,YAAA,GAAA/C,EAsInBuF,SAtImB,eAAAC,EAAAvF,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAAC,EAAAC,KAsIR,SAAAwD,EAAOC,GAAP,IAAAC,EAAA,OAAA5D,EAAAC,EAAAI,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,WAEHvC,EAAKO,cAFF,CAAAqF,EAAArD,KAAA,eAAAqD,EAAAZ,OAAA,oBAMc,EACfW,EADe,EACGD,EAAOG,eAE1BH,EAAOI,UAAYJ,EAAOG,cAAkBH,EAAOK,aAAeJ,GAThE,CAAAC,EAAArD,KAAA,eAUHb,QAAQC,IAAI,oBAVTiE,EAAArD,KAAA,EAWGvC,EAAKmB,aAXR,wBAAAyE,EAAAhD,SAAA6C,MAtIQ,gBAAAO,GAAA,OAAAR,EAAA1C,MAAA3C,KAAA4C,YAAA,GAAA/C,EAqJZiG,OAAS,WAEZ,OACI9B,EAAAnC,EAAAoC,cAAC8B,EAAA,EAAD,CAAgBC,cAAe1G,QAC1B,SAAA2G,GAAA,IAAE5B,EAAF4B,EAAE5B,OAAoCsB,GAAtCM,EAAUC,YAAVD,EAAuBE,cAAvBF,EAAsCN,WAAtC,OACG3B,EAAAnC,EAAAoC,cAAA,WACID,EAAAnC,EAAAoC,cAAC8B,EAAA,EAAD,CAAWjB,GAAI,YAAa3B,SAAUtD,EAAKsD,SAAUiD,eAAa,GAC7D,SAAAC,GAAA,IAAEhD,EAAFgD,EAAEhD,MAAF,OACOW,EAAAnC,EAAAoC,cAAC8B,EAAA,EAAD,CACIhF,YAAalB,EAAKwB,MAAMN,YACxByC,aAAc3D,EAAK2D,aACnBa,OAAQA,EACRhB,MAAOA,EACPiD,UAAWzG,EAAKS,aAChBY,SAAUrB,EAAKoB,oBACfsF,YAAa1G,EAAKQ,YAClB+E,SAAUvF,EAAKuF,SACfoB,YAAU,EACVb,UAAWA,UArK3C9F,EAAKO,eAAgB,EAErBP,EAAKwB,MAAQ,CACTV,MAAO,IAAIC,IACXC,OAAO,EACPC,WAAY,EACZC,YAAa,GAGjBlB,EAAKS,aAAeZ,EAAY+G,oBAAoB,KACpD5G,EAAKQ,YAAcX,EAAY+G,oBAAoB,KACnD5G,EAAKU,aAAeb,EAAY+G,oBAAoB,KAbrC5G,EATvB,OAAAC,OAAA4G,EAAA,EAAA5G,CAAAJ,EAAAC,GAAAG,OAAA6G,EAAA,EAAA7G,CAAAJ,EAAA,EAAAmE,IAAA,qBAAA+C,MAAA,SAsCuBC,EAAWlC,GACvB3E,KAAKJ,MAAMqD,YAAa4D,EAAU5D,WAEjCjD,KAAKS,oBAzCjB,CAAAoD,IAAA,iBAAA+C,MAAA,SAiF2B7F,GACnB,IAAI4D,EAAY7E,OAAOuC,OAAO,GAAGrC,KAAKqB,OAEtCsD,EAAU5D,YAAcA,EACxBf,KAAKU,SAASiE,OArFtBjF,EAAA,CAAiCoH,IAAMC,WAA1BrH,EA6CM+G,oBAAsB,SAACO,GAClC,IAAIC,EAAa3H,OAAO4H,kBAAoB,EAK5C,OAHID,EAAa,IACbA,GAAwB,IAErB9F,KAAKC,MAAM4F,EAAWC,ICzE9B,ICCKE,EDDCC,EAAb,SAAAC,GAII,SAAAD,EAAYxH,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoH,IACfvH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsH,GAAAjH,KAAAH,KAAMJ,KAQF0H,aAAe,SAACC,GACpB1H,EAAKa,SAAS,CAACkG,MAAOW,EAAMC,OAAOZ,QACnC/G,EAAKD,MAAM6H,gBAAgBF,EAAMC,OAAOZ,QAXzB/G,EAcZiG,OAAS,WACZ,OACI9B,EAAAnC,EAAAoC,cAAA,OAAKa,GAAG,eACJd,EAAAnC,EAAAoC,cAAA,SAAOyD,QAAQ,qBAAf,eACA1D,EAAAnC,EAAAoC,cAAA,UAAQa,GAAG,oBAAoB8B,MAAO/G,EAAKwB,MAAMuF,MAAOe,SAAU9H,EAAKyH,cAClEzH,EAAKD,MAAMgI,eAAeC,IAAI,SAASC,EAAMC,GAC1C,OAAO/D,EAAAnC,EAAAoC,cAAA,UAAQJ,IAAMkE,EAAQnB,MAAOkB,GAAOA,QAjB3DjI,EAAKwB,MAAQ,CACTuF,MAAOhH,EAAMoI,iBACbC,gBAAgB,GALLpI,EAJvB,OAAAC,OAAA4G,EAAA,EAAA5G,CAAAsH,EAAAC,GAAAD,EAAA,CAAiCN,IAAMoB,eEC1BC,UAAb,SAAAxI,GACI,SAAAwI,EAAYvI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmI,IACftI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqI,GAAAhI,KAAAH,KAAMJ,KAsBVwI,KAAO,WACH,IAAIC,EAAWvI,OAAOuC,OAAO,GAAGxC,EAAKwB,OAErCgH,EAASC,SAAU,EACnBzI,EAAKa,SAAS2H,IAzBdxI,EAAKwB,MAAQ,CAAEiH,SAAQ,EAAOC,UAAU,EAAOC,UAAW,IAF3C3I,EADvB,OAAAC,OAAA4G,EAAA,EAAA5G,CAAAqI,EAAAxI,GAAAG,OAAA6G,EAAA,EAAA7G,CAAAqI,EAAA,EAAAtE,IAAA,oBAAA+C,MAAA,WAMyB,IAAA6B,EAAAzI,KACjBV,OAAOoJ,iBAAiB,QAAU,SAACC,GAE/B,OADAF,EAAKG,SAASD,EAAEE,MAAMC,UACf,IAGXxJ,OAAOoJ,iBAAiB,qBAAsB,SAACC,GAC3CF,EAAKG,SAASD,EAAEI,OAAOD,aAbnC,CAAAjF,IAAA,WAAA+C,MAAA,SAiBaiC,GAIL,OAHA7I,KAAKU,SAAS,CAAC4H,SAAS,EAAMC,UAAU,EAAMC,UAAUK,IACxDtH,QAAQC,IAAI,2BACZD,QAAQC,IAAIqH,IACL,IArBf,CAAAhF,IAAA,SAAA+C,MAAA,WAgCQ,OAAI5G,KAAKqB,MAAMkH,UAAYvI,KAAKqB,MAAMiH,QAE3BtE,EAAAnC,EAAAoC,cAAA,OAAKa,GAAG,2BACPd,EAAAnC,EAAAoC,cAAA,OAAKa,GAAG,iBACJd,EAAAnC,EAAAoC,cAAA,KAAG+E,QAAShJ,KAAKoI,MAAjB,KACApE,EAAAnC,EAAAoC,cAAA,oCACAD,EAAAnC,EAAAoC,cAAA,YAAOjE,KAAKqB,MAAMmH,aAI3B,OA1CfL,EAAA,CAAkCrB,IAAMC,sBDA5BI,qGAOS8B,aACjB,SAAAA,IAA+F,IAAnFC,EAAmFtG,UAAAuG,OAAA,QAAAC,IAAAxG,UAAA,GAAAA,UAAA,GAAlE,iEAAkE9C,OAAAC,EAAA,EAAAD,CAAAE,KAAAiJ,GAAAjJ,KAG/EqJ,sBAAwB,CACpClC,EAAKmC,SACLnC,EAAKoC,OACLpC,EAAKqC,MACLrC,EAAKsC,YAPsFzJ,KASvFkJ,aATuF,EAC3FlJ,KAAKkJ,QAAUA,+DAUKjG,GAIpB,YAAkBmG,IAHJpJ,KAAKqJ,sBAAsBK,KAAK,SAAU9C,GACpD,OAAOA,IAAU3D,oFAUI0G,EAAaC,sFACjC5J,KAAK6J,iBAAiBD,yBACjB,IAAI7F,MAAM,uBAAuB6F,iBAErCE,EAAU,CACZC,KAAM,QAEJC,YAAShK,KAAKkJ,uCAA8BS,sBAAgBC,YAE3CK,MAAMD,EAAIF,iBAA3BI,kBACaA,EAASC,qBAAtBA,SACAC,EAAsBD,EAAKE,KAC3BC,EAAgCF,EAAgBG,QAAQ,SAACC,GAE3D,YAA6BpB,IAAzBoB,EAAeC,YAAuErB,IAAhDoB,EAAeC,MAAMC,uBAEpD,CADM,CAAC5F,GAAG0F,EAAe1F,GAAGV,QAAQoG,EAAeG,UAAUpG,kBAAkBiG,EAAeC,MAAMC,yBAIxG,uBAEJJ,kHElBAM,cAvBX,SAAAA,EAAYhL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4K,IACf/K,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8K,GAAAzK,KAAAH,KAAMJ,KAJFmD,gBAGW,EAAAlD,EAUX4H,gBAAkB,SAACoD,GACvBhL,EAAKa,SAAS,CAACuC,UAAW4H,KAR1BhL,EAAKkD,WAAa,IAAIkG,EAEtBpJ,EAAKwB,MAAQ,CACT4B,UAAUkE,EAAKmC,UANJzJ,wEAef,OAAOmE,EAAAnC,EAAAoC,cAAA,OAAK6G,UAAU,OAClB9G,EAAAnC,EAAAoC,cAAC8G,EAAD,CAAatD,gBAAiBzH,KAAKyH,gBAAiBO,iBAAkBhI,KAAKqB,MAAM4B,UAAW2E,eAAgB5H,KAAK+C,WAAWsG,wBAC5HrF,EAAAnC,EAAAoC,cAAC+G,EAAD,MACAhH,EAAAnC,EAAAoC,cAACgH,EAAD,CAAalI,WAAY/C,KAAK+C,WAAYE,UAAWjD,KAAKqB,MAAM4B,oBAtBnD6D,IAAMoB,eCH/BgD,IAASpF,OAAO9B,EAAAnC,EAAAoC,cAACkH,EAAD,MAAgBC,SAASC,eAAe,SNkIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d47a9e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n    createMasonryCellPositioner,\r\n    Grid,\r\n    AutoSizer,\r\n    WindowScroller,\r\n    Positioner,\r\n    GridCellProps\r\n} from 'react-virtualized';\r\nimport GalleryItem from \"../models/GalleryItem\";\r\nimport ArtStationAPI, {SORT} from \"../api/ArtStationAPI\";\r\nimport {GalleryAPIInterface} from \"../api/GalleryAPIInterface\";\r\n\r\n\r\ntype GalleryState = {\r\n    items: Map<number,GalleryItem>,\r\n    lastId: number,\r\n    pageNumber: number,\r\n    columnCount: number\r\n}\r\n\r\nexport class GalleryGrid extends React.Component<{galleryAPI: GalleryAPIInterface,sortOrder: string},GalleryState> {\r\n    // locks downloading to one page only, so we don't download duplicated pages\r\n    private isDownloading: boolean;\r\n\r\n    private IMAGE_WIDTH;\r\n    private IMAGE_HEIGHT;\r\n    private COLUMN_WIDTH;\r\n    private GUTTER = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isDownloading = false;\r\n\r\n        this.state = {\r\n            items: new Map<number,GalleryItem>(),\r\n            lastId:0,\r\n            pageNumber: 1,\r\n            columnCount: 4\r\n        };\r\n\r\n        this.IMAGE_HEIGHT = GalleryGrid.calculatePixelValue(200);\r\n        this.IMAGE_WIDTH = GalleryGrid.calculatePixelValue(200);\r\n        this.COLUMN_WIDTH = GalleryGrid.calculatePixelValue(200);\r\n    }\r\n\r\n    private resetChildState = () => {\r\n        this.setState({\r\n            items: new Map<number,GalleryItem>(),\r\n            lastId:0,\r\n            pageNumber: 1,\r\n            columnCount: 4\r\n        });\r\n\r\n        this.isDownloading = false;\r\n        // need to forceload at least one page\r\n        this.getNewPage();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(this.props.sortOrder!== prevProps.sortOrder) {\r\n            // if sort order changed, then we need to rerender the entire gallery\r\n            this.resetChildState();\r\n        }\r\n    }\r\n\r\n    private static calculatePixelValue = (realPixels: number): number => {\r\n        let pixelRatio = window.devicePixelRatio || 1;\r\n        // add some custom scaling for highdpi devices\r\n        if (pixelRatio > 1) {\r\n            pixelRatio = pixelRatio*0.6;\r\n        }\r\n        return Math.floor(realPixels/pixelRatio);\r\n    }\r\n\r\n    calculateRowCount = (): number => {\r\n        const rowCount = Math.floor(this.state.items.size / this.state.columnCount);\r\n        console.log(\"Row count calcuated as: \"+rowCount);\r\n        console.log(\"Number of items: \"+this.state.items.size+\"columnCount: \"+this.state.columnCount);\r\n        return rowCount\r\n    }\r\n\r\n    stateAddPageItems = async (items: GalleryItem[]) => {\r\n        let previousState = Object.assign({}, this.state);\r\n        items.forEach((item) => {\r\n            previousState.items.set(previousState.lastId,item);\r\n            // @ts-ignore\r\n            previousState.lastId++;\r\n        });\r\n        // @ts-ignore ignored due to broken react types\r\n        previousState.pageNumber++;\r\n        await this.setState(previousState);\r\n    }\r\n\r\n    getNewPage = async () => {\r\n        this.isDownloading = true;\r\n        // get initial page of results to get us started\r\n        const items = await this.props.galleryAPI.getGalleryItems(this.state.pageNumber,this.props.sortOrder);\r\n        await this.stateAddPageItems(items);\r\n        this.isDownloading = false;\r\n    }\r\n\r\n    private setColumnCount(columnCount:number) {\r\n        let prevState = Object.assign([],this.state);\r\n        // @ts-ignore\r\n        prevState.columnCount = columnCount;\r\n        this.setState(prevState);\r\n    }\r\n\r\n    onResize = ({width}: any) => {\r\n        this.setColumnCount(this.calculateColumnCount(width));\r\n        // this.resetCellPositioner();\r\n    }\r\n\r\n    cellRenderer = (cellProps: GridCellProps) => {\r\n        const correctIndex = (cellProps.rowIndex * this.state.columnCount) +cellProps.columnIndex;\r\n        console.log(\"key: \"+cellProps.key+\" index: \"+correctIndex);\r\n        const items = this.state.items;\r\n        // this is from the masonry example\r\n        const item = items.get(correctIndex);\r\n        if (typeof item !== \"object\") {\r\n            console.log(\"Items: \");\r\n            console.log(items);\r\n            throw new Error(\"Missing item\")\r\n        };\r\n        return (\r\n            <a key={cellProps.key} style={cellProps.style} href={item.itemURL}>\r\n                <img width={this.IMAGE_WIDTH} height={this.IMAGE_HEIGHT} src={item.thumbnailImageURL}/>\r\n            </a>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns number of columns, must be 1 or greater\r\n     * @param width\r\n     */\r\n    calculateColumnCount = (width: number): number =>  {\r\n        const calculatedColumnCount =  Math.floor((width + this.GUTTER) / (this.COLUMN_WIDTH + this.GUTTER));\r\n        if (calculatedColumnCount > 0) {\r\n            return calculatedColumnCount\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    generateItem = async (): Promise<GalleryItem> => {\r\n        let prevState = Object.assign({}, this.state);\r\n        console.log(\"Previous last id: \");\r\n        console.log(prevState.lastId);\r\n        // @ts-ignore since this is not actually read only but the react types are fucked\r\n        prevState.lastId = prevState.lastId + 1;\r\n        await this.setState(prevState);\r\n\r\n        console.log(\"Newlast id: \");\r\n        console.log(prevState.lastId);\r\n        return {id: prevState.lastId, thumbnailImageURL: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", itemURL:\"https://www.artstation.com\"}\r\n    }\r\n\r\n    stateAddItem = async (item: GalleryItem) => {\r\n        let previousState = Object.assign({}, this.state);\r\n        previousState.items.set(item.id,item);\r\n        await this.setState(previousState);\r\n    }\r\n\r\n    onScroll = async (params: {clientHeight: number,scrollHeight: number, scrollTop: number}) => {\r\n        // don't run if we are still waiting on a download\r\n        if (this.isDownloading) return;\r\n        // console.log(\"onScroll ran\");\r\n        // console.log(\"clientHeight: \"+params.clientHeight+\" scrollHeight: \"+params.scrollHeight\r\n        //     +\" scrollTop: \"+params.scrollTop);\r\n        const preloadPages = 1;\r\n        const loadAheadOffset = params.clientHeight* preloadPages;\r\n\r\n        if ((params.scrollTop + params.clientHeight) >= (params.scrollHeight - loadAheadOffset)) {\r\n            console.log(\"Getting new page\");\r\n            await this.getNewPage();\r\n        }\r\n    }\r\n\r\n    public render = () => {\r\n        // Render your grid\r\n        return (\r\n            <WindowScroller scrollElement={window}>\r\n                {({height, isScrolling, onChildScroll, scrollTop}) => (\r\n                    <div>\r\n                        <AutoSizer id={\"autosizer\"} onResize={this.onResize} disableHeight>\r\n                            {({width}) => (\r\n                                    <Grid\r\n                                        columnCount={this.state.columnCount}\r\n                                        cellRenderer={this.cellRenderer}\r\n                                        height={height}\r\n                                        width={width}\r\n                                        rowHeight={this.IMAGE_HEIGHT}\r\n                                        rowCount={this.calculateRowCount()}\r\n                                        columnWidth={this.IMAGE_WIDTH}\r\n                                        onScroll={this.onScroll}\r\n                                        autoHeight\r\n                                        scrollTop={scrollTop}\r\n                                    />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </div>\r\n                )}\r\n            </WindowScroller>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport class OptionsMenu extends React.PureComponent<\r\n    {changeSortOrder: (newSortOrder:string) => void, sortingOptions: string[], defaultSortOrder: string },\r\n    {selectedSorting:number,value:string}> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: props.defaultSortOrder,\r\n            selectedSorting:0,\r\n        };\r\n    }\r\n\r\n    private handleChange = (event) => {\r\n        this.setState({value: event.target.value});\r\n        this.props.changeSortOrder(event.target.value);\r\n    }\r\n\r\n    public render = () => {\r\n        return (\r\n            <div id=\"options-bar\">\r\n                <label htmlFor='sortOrderSelector'>Sort Order </label>\r\n                <select id='sortOrderSelector' value={this.state.value} onChange={this.handleChange}>\r\n                    {this.props.sortingOptions.map(function(name, index){\r\n                        return <option key={ index } value={name}>{name}</option>;\r\n                    })}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}","import GalleryItem from \"../models/GalleryItem\";\r\nimport {GalleryAPIInterface} from \"./GalleryAPIInterface\";\r\n\r\nexport enum SORT {\r\n    TRENDING = 'trending',\r\n    LATEST = 'latest',\r\n    PICKS = 'picks',\r\n    POPULARITY = 'popularity'\r\n}\r\n\r\nexport default class ArtStationAPI implements GalleryAPIInterface {\r\n    constructor(baseURL:string = 'https://cors-anywhere.herokuapp.com/https://www.artstation.com') {\r\n        this.baseURL = baseURL;\r\n    }\r\n    public readonly AVAILABLE_SORT_ORDERS = [\r\n        SORT.TRENDING,\r\n        SORT.LATEST,\r\n        SORT.PICKS,\r\n        SORT.POPULARITY,\r\n    ];\r\n    private baseURL: string;\r\n\r\n    public isValidSortOrder(sortOrder:string): boolean {\r\n        const found = this.AVAILABLE_SORT_ORDERS.find(function (value) {\r\n            return value === sortOrder;\r\n        });\r\n        return (found !== undefined);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param page\r\n     * @param sorting optional\r\n     */\r\n    public async getGalleryItems(page: number,sorting: string): Promise<GalleryItem[]> {\r\n        if (!this.isValidSortOrder(sorting)) {\r\n            throw new Error('Invalid sort order: '+sorting)\r\n        }\r\n        const options = {\r\n            mode: \"cors\"\r\n        };\r\n        const url = `${this.baseURL}/projects.json?page=${page}&sorting=${sorting}`;\r\n        // @ts-ignore this typecheck is incorrect\r\n        const response = await fetch(url,options);\r\n        const json = await response.json();\r\n        const artstationItems: [] = json.data;\r\n        const convertedItems: GalleryItem[] = artstationItems.flatMap((artstationItem:any)=>{\r\n            // check that there was cover art, some entries with no uploaded assets don't have any\r\n            if (artstationItem.cover !== undefined && artstationItem.cover.micro_square_image_url !== undefined) {\r\n                let result = {id:artstationItem.id,itemURL:artstationItem.permalink,thumbnailImageURL:artstationItem.cover.micro_square_image_url};\r\n                return [result]\r\n            }\r\n\r\n            return [];\r\n        });\r\n        return convertedItems;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './ErrorHandlerStyle.css'\r\n\r\nexport class ErrorHandler extends React.Component<any,{hasError:boolean,lastError:string,visible:boolean}> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { visible:false, hasError: false, lastError: '' };\r\n    }\r\n\r\n    componentDidMount () {\r\n        window.addEventListener(\"error\",  (e) => {\r\n            this.logError(e.error.message);\r\n            return false;\r\n        });\r\n\r\n        window.addEventListener('unhandledrejection', (e) => {\r\n            this.logError(e.reason.message);\r\n        });\r\n    }\r\n\r\n    logError(error: string) {\r\n        this.setState({visible: true, hasError: true, lastError:error });\r\n        console.log(\"React caught an error: \");\r\n        console.log(error);\r\n        return true;\r\n    }\r\n\r\n    hide = () => {\r\n        let oldstate = Object.assign({},this.state);\r\n        // @ts-ignore\r\n        oldstate.visible = false;\r\n        this.setState(oldstate);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError && this.state.visible) {\r\n            // You can render any custom fallback UI\r\n            return <div id='error-message-container'>\r\n                    <div id='error-message'>\r\n                        <a onClick={this.hide}>X</a>\r\n                        <h5>An error has occurred:</h5>\r\n                        <code>{this.state.lastError}</code>\r\n                    </div>\r\n            </div>;\r\n        }\r\n        return '';\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {GalleryGrid} from \"./components/GalleryGrid\";\r\nimport {OptionsMenu} from \"./components/OptionsMenu\";\r\nimport {ErrorHandler} from \"./components/errorhandler/ErrorHandler\";\r\nimport ArtStationAPI, {SORT} from \"./api/ArtStationAPI\";\r\nimport {GalleryAPIInterface} from \"./api/GalleryAPIInterface\";\r\n\r\n\r\n\r\nclass GalleryApp extends React.PureComponent<any, {sortOrder:string}> {\r\n    private galleryAPI: GalleryAPIInterface;\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.galleryAPI = new ArtStationAPI();\r\n\r\n        this.state = {\r\n            sortOrder:SORT.TRENDING\r\n        };\r\n    }\r\n\r\n    private changeSortOrder = (newSortOrder: string) => {\r\n        this.setState({sortOrder: newSortOrder});\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"App\">\r\n            <OptionsMenu changeSortOrder={this.changeSortOrder} defaultSortOrder={this.state.sortOrder} sortingOptions={this.galleryAPI.AVAILABLE_SORT_ORDERS}></OptionsMenu>\r\n            <ErrorHandler></ErrorHandler>\r\n            <GalleryGrid galleryAPI={this.galleryAPI} sortOrder={this.state.sortOrder}></GalleryGrid>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default GalleryApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport GalleryApp from \"./GalleryApp\";\r\n\r\nReactDOM.render(<GalleryApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}