{"version":3,"sources":["serviceWorker.ts","api/ArtStationAPI.ts","components/GalleryGrid.tsx","GalleryApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ArtStationAPI","Object","classCallCheck","this","page","options","mode","url","fetch","response","json","artstationItems","data","convertedItems","map","artstationItem","id","itemURL","permalink","thumbnailImageURL","cover","micro_square_image_url","GalleryGrid","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","columnCount","isDownloading","IMAGE_WIDTH","IMAGE_HEIGHT","COLUMN_WIDTH","GUTTER","calculateRowCount","rowCount","Math","floor","state","items","size","console","log","stateAddPageItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","previousState","wrap","_context","prev","next","assign","forEach","item","set","lastId","pageNumber","setState","stop","_x","apply","arguments","getNewPage","_callee2","_context2","getGalleryItems","sent","onResize","_ref3","width","calculateColumnCount","cellRenderer","cellProps","correctIndex","rowIndex","columnIndex","key","get","Error","react_default","createElement","href","style","height","src","calculatedColumnCount","generateItem","_callee3","prevState","_context3","abrupt","stateAddItem","_ref5","_callee4","_context4","_x2","onScroll","_ref6","_callee5","params","loadAheadOffset","_context5","clientHeight","scrollTop","scrollHeight","_x3","render","es","scrollElement","_ref7","isScrolling","onChildScroll","disableHeight","_ref8","rowHeight","columnWidth","autoHeight","Map","calculatePixelValue","inherits","React","Component","realPixels","pixelRatio","devicePixelRatio","GalleryApp","className","GalleryGrid_GalleryGrid","ReactDOM","src_GalleryApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44c6fbaa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import GalleryItem from \"../models/GalleryItem\";\r\n\r\nexport default class ArtStationAPI {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public static async getGalleryItems(page: number): Promise<GalleryItem[]> {\r\n        const options = {\r\n            mode: \"cors\"\r\n        };\r\n        const url = `https://cors-anywhere.herokuapp.com/https://www.artstation.com/projects.json?page=${page}&sorting=trending`;\r\n        // @ts-ignore\r\n        const response = await fetch(url,options);\r\n        const json = await response.json();\r\n        const artstationItems: [] = json.data;\r\n        const convertedItems: GalleryItem[] = artstationItems.map((artstationItem:any)=>{\r\n            return {id:artstationItem.id,itemURL:artstationItem.permalink,thumbnailImageURL:artstationItem.cover.micro_square_image_url};\r\n        });\r\n        return convertedItems;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Grid,\n    AutoSizer,\n    WindowScroller,\n    Positioner,\n    GridCellProps\n} from 'react-virtualized';\nimport GalleryItem from \"../models/GalleryItem\";\nimport ArtStationAPI from \"../api/ArtStationAPI\";\n\n// const GUTTER = 1;\n// const COLUMN_WIDTH = 200;\n// const IMAGE_HEIGHT = 200;\n// const IMAGE_WIDTH = 200;\n\n// Array of images with captions\n// const list: DatumImage[] = [\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n//     {source: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", caption: \"nothing\", imageHeight:200,imageWidth:200},\n// ];\n\ntype GalleryState = {\n    items: Map<number,GalleryItem>,\n    lastId: number,\n    pageNumber: number,\n}\n\nexport class GalleryGrid extends React.Component<any,GalleryState> {\n\n    private columnCount: number;\n    // locks downloading to one page only, so we don't download duplicated pages\n    private isDownloading: boolean;\n\n    private IMAGE_WIDTH;\n    private IMAGE_HEIGHT;\n    private COLUMN_WIDTH;\n    private GUTTER = 0;\n\n    constructor(props) {\n        super(props);\n        this.isDownloading = false;\n\n\n        this.state = {\n            items: new Map<number,GalleryItem>(),\n            lastId:0,\n            pageNumber: 1,\n        };\n\n        this.columnCount = 4;\n\n        this.IMAGE_HEIGHT = GalleryGrid.calculatePixelValue(200);\n        this.IMAGE_WIDTH = GalleryGrid.calculatePixelValue(200);\n        this.COLUMN_WIDTH = GalleryGrid.calculatePixelValue(200);\n\n        this.calculateRowCount();\n    }\n\n    private static calculatePixelValue = (realPixels: number): number => {\n        let pixelRatio = window.devicePixelRatio || 1;\n        // add some custom scaling for highdpi devices\n        if (pixelRatio > 1) {\n            pixelRatio = pixelRatio*0.6;\n        }\n        return Math.floor(realPixels/pixelRatio);\n    }\n\n    calculateRowCount = (): number => {\n        const rowCount = Math.floor(this.state.items.size / this.columnCount);\n        console.log(\"Row count calcuated as: \"+rowCount);\n        console.log(\"Number of items: \"+this.state.items.size+\"columnCount: \"+this.columnCount);\n        return rowCount\n    }\n\n    stateAddPageItems = async (items: GalleryItem[]) => {\n        let previousState = Object.assign({}, this.state);\n        items.forEach((item) => {\n            previousState.items.set(previousState.lastId,item);\n            // @ts-ignore\n            previousState.lastId++;\n        });\n        // @ts-ignore ignored due to broken react types\n        previousState.pageNumber++;\n        await this.setState(previousState);\n    }\n\n    getNewPage = async () => {\n        this.isDownloading = true;\n        // get initial page of results to get us started\n        const items = await ArtStationAPI.getGalleryItems(this.state.pageNumber);\n        await this.stateAddPageItems(items);\n        this.isDownloading = false;\n    }\n\n\n    onResize = ({width}: any) => {\n        this.columnCount = this.calculateColumnCount(width);\n        // this.resetCellPositioner();\n    }\n\n    cellRenderer = (cellProps: GridCellProps) => {\n        const correctIndex = (cellProps.rowIndex * this.columnCount) +cellProps.columnIndex;\n        console.log(\"key: \"+cellProps.key+\" index: \"+correctIndex);\n        const items = this.state.items;\n        // this is from the masonry example\n        const item = items.get(correctIndex);\n        if (typeof item !== \"object\") {\n            console.log(\"Items: \");\n            console.log(items);\n            throw new Error(\"Missing item\")\n        };\n        return (\n            <a href={item.itemURL}>\n                <img key={cellProps.key} style={cellProps.style} width={this.IMAGE_WIDTH} height={this.IMAGE_HEIGHT} src={item.thumbnailImageURL}/>\n            </a>\n        );\n    }\n\n    /**\n     * returns number of columns, must be 1 or greater\n     * @param width\n     */\n    calculateColumnCount = (width: number): number =>  {\n        const calculatedColumnCount =  Math.floor((width + this.GUTTER) / (this.COLUMN_WIDTH + this.GUTTER));\n        if (calculatedColumnCount > 0) {\n            return calculatedColumnCount\n        } else {\n            return 1;\n        }\n    }\n\n    generateItem = async (): Promise<GalleryItem> => {\n        let prevState = Object.assign({}, this.state);\n        console.log(\"Previous last id: \");\n        console.log(prevState.lastId);\n        // @ts-ignore since this is not actually read only but the react types are fucked\n        prevState.lastId = prevState.lastId + 1;\n        await this.setState(prevState);\n\n        console.log(\"Newlast id: \");\n        console.log(prevState.lastId);\n        return {id: prevState.lastId, thumbnailImageURL: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", itemURL:\"https://www.artstation.com\"}\n    }\n\n    stateAddItem = async (item: GalleryItem) => {\n        let previousState = Object.assign({}, this.state);\n        previousState.items.set(item.id,item);\n        await this.setState(previousState);\n    }\n\n    onScroll = async (params: {clientHeight: number,scrollHeight: number, scrollTop: number}) => {\n        // don't run if we are still waiting on a download\n        if (this.isDownloading) return;\n        // console.log(\"onScroll ran\");\n        // console.log(\"clientHeight: \"+params.clientHeight+\" scrollHeight: \"+params.scrollHeight\n        //     +\" scrollTop: \"+params.scrollTop);\n        const preloadPages = 1;\n        const loadAheadOffset = params.clientHeight* preloadPages;\n\n        if ((params.scrollTop + params.clientHeight) >= (params.scrollHeight - loadAheadOffset)) {\n            console.log(\"Getting new page\");\n            await this.getNewPage();\n        }\n    }\n\n    public render = () => {\n        // Render your grid\n        return (\n            <WindowScroller scrollElement={window}>\n                {({height, isScrolling, onChildScroll, scrollTop}) => (\n                    <div>\n                        <AutoSizer id={\"autosizer\"} onResize={this.onResize} disableHeight>\n                            {({width}) => (\n                                    <Grid\n                                        columnCount={this.columnCount}\n                                        cellRenderer={this.cellRenderer}\n                                        height={height}\n                                        width={width}\n                                        rowHeight={this.IMAGE_HEIGHT}\n                                        rowCount={this.calculateRowCount()}\n                                        columnWidth={this.IMAGE_WIDTH}\n                                        onScroll={this.onScroll}\n                                        autoHeight\n                                        scrollTop={scrollTop}\n                                    />\n                            )}\n                        </AutoSizer>\n                    </div>\n                )}\n            </WindowScroller>\n        );\n    }\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Gallery} from \"./components/Gallery\";\r\nimport {GalleryGrid} from \"./components/GalleryGrid\";\r\n\r\n\r\n\r\nconst GalleryApp: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <GalleryGrid></GalleryGrid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GalleryApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport GalleryApp from \"./GalleryApp\";\r\n\r\nReactDOM.render(<GalleryApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}