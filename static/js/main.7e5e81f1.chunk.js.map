{"version":3,"sources":["serviceWorker.ts","api/ArtStationAPI.ts","components/GalleryGrid.tsx","components/errorhandler/ErrorHandler.tsx","GalleryApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Sorting","ArtStationAPI","page","sorting","TRENDING","options","mode","url","fetch","response","json","artstationItems","data","convertedItems","map","artstationItem","id","itemURL","permalink","thumbnailImageURL","cover","micro_square_image_url","GalleryGrid","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","columnCount","isDownloading","IMAGE_WIDTH","IMAGE_HEIGHT","COLUMN_WIDTH","GUTTER","calculateRowCount","rowCount","Math","floor","state","items","size","console","log","stateAddPageItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","previousState","wrap","_context","prev","next","assign","forEach","item","set","lastId","pageNumber","setState","stop","_x","apply","arguments","getNewPage","_callee2","_context2","getGalleryItems","sent","onResize","_ref3","width","calculateColumnCount","cellRenderer","cellProps","correctIndex","rowIndex","columnIndex","key","get","Error","react_default","createElement","href","style","height","src","calculatedColumnCount","generateItem","_callee3","prevState","_context3","abrupt","stateAddItem","_ref5","_callee4","_context4","_x2","onScroll","_ref6","_callee5","params","loadAheadOffset","_context5","clientHeight","scrollTop","scrollHeight","_x3","render","es","scrollElement","_ref7","isScrolling","onChildScroll","disableHeight","_ref8","rowHeight","columnWidth","autoHeight","Map","calculatePixelValue","inherits","React","Component","realPixels","pixelRatio","devicePixelRatio","ErrorHandler","hide","oldstate","visible","hasError","lastError","createClass","value","_this2","addEventListener","e","logError","error","message","reason","onClick","GalleryApp","className","ErrorHandler_ErrorHandler","GalleryGrid_GalleryGrid","ReactDOM","src_GalleryApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qEChBDC,0LAOgBC,uJAMmBC,wGAAaC,iCAAmBH,EAAQI,SAClEC,EAAU,CACZC,KAAM,QAEJC,8FAA2FL,sBAAgBC,YAE1FK,MAAMD,EAAIF,iBAA3BI,kBACaA,EAASC,qBAAtBA,SACAC,EAAsBD,EAAKE,KAC3BC,EAAgCF,EAAgBG,IAAI,SAACC,GACvD,MAAO,CAACC,GAAGD,EAAeC,GAAGC,QAAQF,EAAeG,UAAUC,kBAAkBJ,EAAeK,MAAMC,4CAElGR,2GCLFS,EAAb,SAAAC,GAWI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAVFQ,iBASW,EAAAP,EAPXQ,mBAOW,EAAAR,EALXS,iBAKW,EAAAT,EAJXU,kBAIW,EAAAV,EAHXW,kBAGW,EAAAX,EAFXY,OAAS,EAEEZ,EA6BnBa,kBAAoB,WAChB,IAAMC,EAAWC,KAAKC,MAAMhB,EAAKiB,MAAMC,MAAMC,KAAOnB,EAAKO,aAGzD,OAFAa,QAAQC,IAAI,2BAA2BP,GACvCM,QAAQC,IAAI,oBAAoBrB,EAAKiB,MAAMC,MAAMC,KAAK,gBAAgBnB,EAAKO,aACpEO,GAjCQd,EAoCnBsB,kBApCmB,eAAAC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KAoCC,SAAAC,EAAOV,GAAP,IAAAW,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZJ,EAAgB5B,OAAOiC,OAAO,GAAIlC,EAAKiB,OAC3CC,EAAMiB,QAAQ,SAACC,GACXP,EAAcX,MAAMmB,IAAIR,EAAcS,OAAOF,GAE7CP,EAAcS,WAGlBT,EAAcU,aARER,EAAAE,KAAA,EASVjC,EAAKwC,SAASX,GATJ,wBAAAE,EAAAU,SAAAb,MApCD,gBAAAc,GAAA,OAAAnB,EAAAoB,MAAAxC,KAAAyC,YAAA,GAAA5C,EAgDnB6C,WAhDmB5C,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KAgDN,SAAAmB,IAAA,IAAA5B,EAAA,OAAAO,EAAAC,EAAAI,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cACTjC,EAAKQ,eAAgB,EADZuC,EAAAd,KAAA,EAGWzD,EAAcwE,gBAAgBhD,EAAKiB,MAAMsB,YAHpD,cAGHrB,EAHG6B,EAAAE,KAAAF,EAAAd,KAAA,EAIHjC,EAAKsB,kBAAkBJ,GAJpB,OAKTlB,EAAKQ,eAAgB,EALZ,wBAAAuC,EAAAN,SAAAK,MAhDM9C,EAyDnBkD,SAAW,SAAAC,GAAkB,IAAhBC,EAAgBD,EAAhBC,MACTpD,EAAKO,YAAcP,EAAKqD,qBAAqBD,IA1D9BpD,EA8DnBsD,aAAe,SAACC,GACZ,IAAMC,EAAgBD,EAAUE,SAAWzD,EAAKO,YAAcgD,EAAUG,YACxEtC,QAAQC,IAAI,QAAQkC,EAAUI,IAAI,WAAWH,GAC7C,IAAMtC,EAAQlB,EAAKiB,MAAMC,MAEnBkB,EAAOlB,EAAM0C,IAAIJ,GACvB,GAAoB,kBAATpB,EAGP,MAFAhB,QAAQC,IAAI,WACZD,QAAQC,IAAIH,GACN,IAAI2C,MAAM,gBAEpB,OACIC,EAAApC,EAAAqC,cAAA,KAAGC,KAAM5B,EAAK5C,SACVsE,EAAApC,EAAAqC,cAAA,OAAKJ,IAAKJ,EAAUI,IAAKM,MAAOV,EAAUU,MAAOb,MAAOpD,EAAKS,YAAayD,OAAQlE,EAAKU,aAAcyD,IAAK/B,EAAK1C,sBA3ExGM,EAoFnBqD,qBAAuB,SAACD,GACpB,IAAMgB,EAAyBrD,KAAKC,OAAOoC,EAAQpD,EAAKY,SAAWZ,EAAKW,aAAeX,EAAKY,SAC5F,OAAIwD,EAAwB,EACjBA,EAEA,GAzFIpE,EA6FnBqE,aA7FmBpE,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KA6FJ,SAAA2C,IAAA,IAAAC,EAAA,OAAA9C,EAAAC,EAAAI,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cACPsC,EAAYtE,OAAOiC,OAAO,GAAIlC,EAAKiB,OACvCG,QAAQC,IAAI,sBACZD,QAAQC,IAAIkD,EAAUjC,QAEtBiC,EAAUjC,OAASiC,EAAUjC,OAAS,EAL3BkC,EAAAvC,KAAA,EAMLjC,EAAKwC,SAAS+B,GANT,cAQXnD,QAAQC,IAAI,gBACZD,QAAQC,IAAIkD,EAAUjC,QATXkC,EAAAC,OAAA,SAUJ,CAAClF,GAAIgF,EAAUjC,OAAQ5C,kBAAmB,+HAAgIF,QAAQ,+BAV9K,wBAAAgF,EAAA/B,SAAA6B,MA7FItE,EA0GnB0E,aA1GmB,eAAAC,EAAA1E,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KA0GJ,SAAAiD,EAAOxC,GAAP,IAAAP,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cACPJ,EAAgB5B,OAAOiC,OAAO,GAAIlC,EAAKiB,QAC7BC,MAAMmB,IAAID,EAAK7C,GAAG6C,GAFrByC,EAAA5C,KAAA,EAGLjC,EAAKwC,SAASX,GAHT,wBAAAgD,EAAApC,SAAAmC,MA1GI,gBAAAE,GAAA,OAAAH,EAAAhC,MAAAxC,KAAAyC,YAAA,GAAA5C,EAgHnB+E,SAhHmB,eAAAC,EAAA/E,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KAgHR,SAAAsD,EAAOC,GAAP,IAAAC,EAAA,OAAA1D,EAAAC,EAAAI,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,WAEHjC,EAAKQ,cAFF,CAAA4E,EAAAnD,KAAA,eAAAmD,EAAAX,OAAA,oBAMc,EACfU,EADe,EACGD,EAAOG,eAE1BH,EAAOI,UAAYJ,EAAOG,cAAkBH,EAAOK,aAAeJ,GAThE,CAAAC,EAAAnD,KAAA,eAUHb,QAAQC,IAAI,oBAVT+D,EAAAnD,KAAA,EAWGjC,EAAK6C,aAXR,wBAAAuC,EAAA3C,SAAAwC,MAhHQ,gBAAAO,GAAA,OAAAR,EAAArC,MAAAxC,KAAAyC,YAAA,GAAA5C,EA+HZyF,OAAS,WAEZ,OACI3B,EAAApC,EAAAqC,cAAC2B,EAAA,EAAD,CAAgBC,cAAexH,QAC1B,SAAAyH,GAAA,IAAE1B,EAAF0B,EAAE1B,OAAoCoB,GAAtCM,EAAUC,YAAVD,EAAuBE,cAAvBF,EAAsCN,WAAtC,OACGxB,EAAApC,EAAAqC,cAAA,WACID,EAAApC,EAAAqC,cAAC2B,EAAA,EAAD,CAAWnG,GAAI,YAAa2D,SAAUlD,EAAKkD,SAAU6C,eAAa,GAC7D,SAAAC,GAAA,IAAE5C,EAAF4C,EAAE5C,MAAF,OACOU,EAAApC,EAAAqC,cAAC2B,EAAA,EAAD,CACInF,YAAaP,EAAKO,YAClB+C,aAActD,EAAKsD,aACnBY,OAAQA,EACRd,MAAOA,EACP6C,UAAWjG,EAAKU,aAChBI,SAAUd,EAAKa,oBACfqF,YAAalG,EAAKS,YAClBsE,SAAU/E,EAAK+E,SACfoB,YAAU,EACVb,UAAWA,UA/I3CtF,EAAKQ,eAAgB,EAGrBR,EAAKiB,MAAQ,CACTC,MAAO,IAAIkF,IACX9D,OAAO,EACPC,WAAY,GAGhBvC,EAAKO,YAAc,EAEnBP,EAAKU,aAAeb,EAAYwG,oBAAoB,KACpDrG,EAAKS,YAAcZ,EAAYwG,oBAAoB,KACnDrG,EAAKW,aAAed,EAAYwG,oBAAoB,KAEpDrG,EAAKa,oBAjBUb,EAXvB,OAAAC,OAAAqG,EAAA,EAAArG,CAAAJ,EAAAC,GAAAD,EAAA,CAAiC0G,IAAMC,WAA1B3G,EA+BMwG,oBAAsB,SAACI,GAClC,IAAIC,EAAavI,OAAOwI,kBAAoB,EAK5C,OAHID,EAAa,IACbA,GAAwB,IAErB3F,KAAKC,MAAMyF,EAAWC,eCxDxBE,EAAb,SAAA9G,GACI,SAAA8G,EAAY7G,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyG,IACf5G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2G,GAAAtG,KAAAH,KAAMJ,KAsBV8G,KAAO,WACH,IAAIC,EAAW7G,OAAOiC,OAAO,GAAGlC,EAAKiB,OAErC6F,EAASC,SAAU,EACnB/G,EAAKwC,SAASsE,IAzBd9G,EAAKiB,MAAQ,CAAE8F,SAAQ,EAAOC,UAAU,EAAOC,UAAW,IAF3CjH,EADvB,OAAAC,OAAAqG,EAAA,EAAArG,CAAA2G,EAAA9G,GAAAG,OAAAiH,EAAA,EAAAjH,CAAA2G,EAAA,EAAAjD,IAAA,oBAAAwD,MAAA,WAMyB,IAAAC,EAAAjH,KACjBhC,OAAOkJ,iBAAiB,QAAU,SAACC,GAE/B,OADAF,EAAKG,SAASD,EAAEE,MAAMC,UACf,IAGXtJ,OAAOkJ,iBAAiB,qBAAsB,SAACC,GAC3CF,EAAKG,SAASD,EAAEI,OAAOD,aAbnC,CAAA9D,IAAA,WAAAwD,MAAA,SAiBaK,GAIL,OAHArH,KAAKqC,SAAS,CAACuE,SAAS,EAAMC,UAAU,EAAMC,UAAUO,IACxDpG,QAAQC,IAAI,2BACZD,QAAQC,IAAImG,IACL,IArBf,CAAA7D,IAAA,SAAAwD,MAAA,WAgCQ,OAAIhH,KAAKc,MAAM+F,UAAY7G,KAAKc,MAAM8F,QAE3BjD,EAAApC,EAAAqC,cAAA,OAAKxE,GAAG,2BACPuE,EAAApC,EAAAqC,cAAA,OAAKxE,GAAG,iBACJuE,EAAApC,EAAAqC,cAAA,KAAG4D,QAASxH,KAAK0G,MAAjB,KACA/C,EAAApC,EAAAqC,cAAA,oCACAD,EAAApC,EAAAqC,cAAA,YAAO5D,KAAKc,MAAMgG,aAI3B,OA1CfL,EAAA,CAAkCL,IAAMC,WCezBoB,EATc,WAC3B,OACE9D,EAAApC,EAAAqC,cAAA,OAAK8D,UAAU,OACX/D,EAAApC,EAAAqC,cAAC+D,EAAD,MACAhE,EAAApC,EAAAqC,cAACgE,EAAD,QCNRC,IAASvC,OAAO3B,EAAApC,EAAAqC,cAACkE,EAAD,MAAgBC,SAASC,eAAe,SLkIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e5e81f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import GalleryItem from \"../models/GalleryItem\";\r\n\r\nenum Sorting {\r\n    TRENDING = 'trending',\r\n    LATEST = 'latest',\r\n    PICKS = 'picks',\r\n    POPULARITY = 'popularity'\r\n}\r\n\r\nexport default class ArtStationAPI {\r\n    /**\r\n     *\r\n     * @param page\r\n     * @param sorting optional\r\n     */\r\n    public static async getGalleryItems(page: number,sorting: Sorting = Sorting.TRENDING): Promise<GalleryItem[]> {\r\n        const options = {\r\n            mode: \"cors\"\r\n        };\r\n        const url = `https://cors-anywhere.herokuapp.com/https://www.artstation.com/projects.json?page=${page}&sorting=${sorting}`;\r\n        // @ts-ignore this typecheck is incorrect\r\n        const response = await fetch(url,options);\r\n        const json = await response.json();\r\n        const artstationItems: [] = json.data;\r\n        const convertedItems: GalleryItem[] = artstationItems.map((artstationItem:any)=>{\r\n            return {id:artstationItem.id,itemURL:artstationItem.permalink,thumbnailImageURL:artstationItem.cover.micro_square_image_url};\r\n        });\r\n        return convertedItems;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n    createMasonryCellPositioner,\r\n    Grid,\r\n    AutoSizer,\r\n    WindowScroller,\r\n    Positioner,\r\n    GridCellProps\r\n} from 'react-virtualized';\r\nimport GalleryItem from \"../models/GalleryItem\";\r\nimport ArtStationAPI from \"../api/ArtStationAPI\";\r\n\r\n\r\ntype GalleryState = {\r\n    items: Map<number,GalleryItem>,\r\n    lastId: number,\r\n    pageNumber: number,\r\n}\r\n\r\nexport class GalleryGrid extends React.Component<any,GalleryState> {\r\n\r\n    private columnCount: number;\r\n    // locks downloading to one page only, so we don't download duplicated pages\r\n    private isDownloading: boolean;\r\n\r\n    private IMAGE_WIDTH;\r\n    private IMAGE_HEIGHT;\r\n    private COLUMN_WIDTH;\r\n    private GUTTER = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isDownloading = false;\r\n\r\n\r\n        this.state = {\r\n            items: new Map<number,GalleryItem>(),\r\n            lastId:0,\r\n            pageNumber: 1,\r\n        };\r\n\r\n        this.columnCount = 4;\r\n\r\n        this.IMAGE_HEIGHT = GalleryGrid.calculatePixelValue(200);\r\n        this.IMAGE_WIDTH = GalleryGrid.calculatePixelValue(200);\r\n        this.COLUMN_WIDTH = GalleryGrid.calculatePixelValue(200);\r\n\r\n        this.calculateRowCount();\r\n    }\r\n\r\n    private static calculatePixelValue = (realPixels: number): number => {\r\n        let pixelRatio = window.devicePixelRatio || 1;\r\n        // add some custom scaling for highdpi devices\r\n        if (pixelRatio > 1) {\r\n            pixelRatio = pixelRatio*0.6;\r\n        }\r\n        return Math.floor(realPixels/pixelRatio);\r\n    }\r\n\r\n    calculateRowCount = (): number => {\r\n        const rowCount = Math.floor(this.state.items.size / this.columnCount);\r\n        console.log(\"Row count calcuated as: \"+rowCount);\r\n        console.log(\"Number of items: \"+this.state.items.size+\"columnCount: \"+this.columnCount);\r\n        return rowCount\r\n    }\r\n\r\n    stateAddPageItems = async (items: GalleryItem[]) => {\r\n        let previousState = Object.assign({}, this.state);\r\n        items.forEach((item) => {\r\n            previousState.items.set(previousState.lastId,item);\r\n            // @ts-ignore\r\n            previousState.lastId++;\r\n        });\r\n        // @ts-ignore ignored due to broken react types\r\n        previousState.pageNumber++;\r\n        await this.setState(previousState);\r\n    }\r\n\r\n    getNewPage = async () => {\r\n        this.isDownloading = true;\r\n        // get initial page of results to get us started\r\n        const items = await ArtStationAPI.getGalleryItems(this.state.pageNumber);\r\n        await this.stateAddPageItems(items);\r\n        this.isDownloading = false;\r\n    }\r\n\r\n\r\n    onResize = ({width}: any) => {\r\n        this.columnCount = this.calculateColumnCount(width);\r\n        // this.resetCellPositioner();\r\n    }\r\n\r\n    cellRenderer = (cellProps: GridCellProps) => {\r\n        const correctIndex = (cellProps.rowIndex * this.columnCount) +cellProps.columnIndex;\r\n        console.log(\"key: \"+cellProps.key+\" index: \"+correctIndex);\r\n        const items = this.state.items;\r\n        // this is from the masonry example\r\n        const item = items.get(correctIndex);\r\n        if (typeof item !== \"object\") {\r\n            console.log(\"Items: \");\r\n            console.log(items);\r\n            throw new Error(\"Missing item\")\r\n        };\r\n        return (\r\n            <a href={item.itemURL}>\r\n                <img key={cellProps.key} style={cellProps.style} width={this.IMAGE_WIDTH} height={this.IMAGE_HEIGHT} src={item.thumbnailImageURL}/>\r\n            </a>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns number of columns, must be 1 or greater\r\n     * @param width\r\n     */\r\n    calculateColumnCount = (width: number): number =>  {\r\n        const calculatedColumnCount =  Math.floor((width + this.GUTTER) / (this.COLUMN_WIDTH + this.GUTTER));\r\n        if (calculatedColumnCount > 0) {\r\n            return calculatedColumnCount\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    generateItem = async (): Promise<GalleryItem> => {\r\n        let prevState = Object.assign({}, this.state);\r\n        console.log(\"Previous last id: \");\r\n        console.log(prevState.lastId);\r\n        // @ts-ignore since this is not actually read only but the react types are fucked\r\n        prevState.lastId = prevState.lastId + 1;\r\n        await this.setState(prevState);\r\n\r\n        console.log(\"Newlast id: \");\r\n        console.log(prevState.lastId);\r\n        return {id: prevState.lastId, thumbnailImageURL: \"https://cdnb.artstation.com/p/assets/covers/images/017/685/915/micro_square/timo-peter-artstation-title-image.jpg?1556957002\", itemURL:\"https://www.artstation.com\"}\r\n    }\r\n\r\n    stateAddItem = async (item: GalleryItem) => {\r\n        let previousState = Object.assign({}, this.state);\r\n        previousState.items.set(item.id,item);\r\n        await this.setState(previousState);\r\n    }\r\n\r\n    onScroll = async (params: {clientHeight: number,scrollHeight: number, scrollTop: number}) => {\r\n        // don't run if we are still waiting on a download\r\n        if (this.isDownloading) return;\r\n        // console.log(\"onScroll ran\");\r\n        // console.log(\"clientHeight: \"+params.clientHeight+\" scrollHeight: \"+params.scrollHeight\r\n        //     +\" scrollTop: \"+params.scrollTop);\r\n        const preloadPages = 1;\r\n        const loadAheadOffset = params.clientHeight* preloadPages;\r\n\r\n        if ((params.scrollTop + params.clientHeight) >= (params.scrollHeight - loadAheadOffset)) {\r\n            console.log(\"Getting new page\");\r\n            await this.getNewPage();\r\n        }\r\n    }\r\n\r\n    public render = () => {\r\n        // Render your grid\r\n        return (\r\n            <WindowScroller scrollElement={window}>\r\n                {({height, isScrolling, onChildScroll, scrollTop}) => (\r\n                    <div>\r\n                        <AutoSizer id={\"autosizer\"} onResize={this.onResize} disableHeight>\r\n                            {({width}) => (\r\n                                    <Grid\r\n                                        columnCount={this.columnCount}\r\n                                        cellRenderer={this.cellRenderer}\r\n                                        height={height}\r\n                                        width={width}\r\n                                        rowHeight={this.IMAGE_HEIGHT}\r\n                                        rowCount={this.calculateRowCount()}\r\n                                        columnWidth={this.IMAGE_WIDTH}\r\n                                        onScroll={this.onScroll}\r\n                                        autoHeight\r\n                                        scrollTop={scrollTop}\r\n                                    />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </div>\r\n                )}\r\n            </WindowScroller>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport './ErrorHandlerStyle.css'\r\n\r\nexport class ErrorHandler extends React.Component<any,{hasError:boolean,lastError:string,visible:boolean}> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { visible:false, hasError: false, lastError: '' };\r\n    }\r\n\r\n    componentDidMount () {\r\n        window.addEventListener(\"error\",  (e) => {\r\n            this.logError(e.error.message);\r\n            return false;\r\n        });\r\n\r\n        window.addEventListener('unhandledrejection', (e) => {\r\n            this.logError(e.reason.message);\r\n        });\r\n    }\r\n\r\n    logError(error: string) {\r\n        this.setState({visible: true, hasError: true, lastError:error });\r\n        console.log(\"React caught an error: \");\r\n        console.log(error);\r\n        return true;\r\n    }\r\n\r\n    hide = () => {\r\n        let oldstate = Object.assign({},this.state);\r\n        // @ts-ignore\r\n        oldstate.visible = false;\r\n        this.setState(oldstate);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError && this.state.visible) {\r\n            // You can render any custom fallback UI\r\n            return <div id='error-message-container'>\r\n                    <div id='error-message'>\r\n                        <a onClick={this.hide}>X</a>\r\n                        <h5>An error has occurred:</h5>\r\n                        <code>{this.state.lastError}</code>\r\n                    </div>\r\n            </div>;\r\n        }\r\n        return '';\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Gallery} from \"./components/Gallery\";\r\nimport {GalleryGrid} from \"./components/GalleryGrid\";\r\nimport {ErrorHandler} from \"./components/errorhandler/ErrorHandler\";\r\n\r\n\r\n\r\nconst GalleryApp: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n        <ErrorHandler></ErrorHandler>\r\n        <GalleryGrid></GalleryGrid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GalleryApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport GalleryApp from \"./GalleryApp\";\r\n\r\nReactDOM.render(<GalleryApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}